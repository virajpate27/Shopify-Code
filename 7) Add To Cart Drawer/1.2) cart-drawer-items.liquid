<div id="CartItems" class="space-y-4">
  {% if cart.item_count > 0 %}
    {% for item in cart.items %}
      <div class="flex items-start gap-4 border-b pb-4">
        <img src="{{ item.image | image_url: width: 100 }}" alt="{{ item.product.title }}" class="w-20 h-20 object-cover rounded-md" />

        <div class="flex-1">
          <div class="flex justify-between">
            <h4 class="font-semibold text-sm">{{ item.product.title }}</h4>
            <button class="remove-item text-sm text-red-500" data-line="{{ forloop.index }}">🗑️</button>
          </div>

          {% if item.variant.title != 'Default Title' %}
            <p class="text-xs text-gray-500 mt-1">{{ item.variant.title }}</p>
          {% endif %}

          <div class="flex items-center mt-2 gap-2">
            <button class="qty-decrease text-sm border px-2" data-line="{{ forloop.index }}">−</button>
            <span class="text-sm">{{ item.quantity }}</span>
            <button class="qty-increase text-sm border px-2" data-line="{{ forloop.index }}">+</button>
          </div>

          <p class="text-sm font-medium mt-2">{{ item.line_price | money }}</p>
        </div>
      </div>
    {% endfor %}
  {% else %}
    <p class="text-center text-sm text-gray-600">Your cart is currently empty!</p>
    <a href="/collections/all" class="mt-4 inline-block text-center px-4 py-2 bg-black text-white rounded-md">Continue Shopping</a>
  {% endif %}
</div>


<script>

document.addEventListener('DOMContentLoaded', () => {
  const cartContainer = document.getElementById('CartItems');

  // Delegate clicks for + / − and remove
  cartContainer.addEventListener('click', async (e) => {
    if (e.target.classList.contains('qty-increase') || e.target.classList.contains('qty-decrease')) {
      const line = e.target.dataset.line;
      const currentQty = parseInt(e.target.closest('.flex').querySelector('span').textContent);
      const newQty = e.target.classList.contains('qty-increase') ? currentQty + 1 : Math.max(1, currentQty - 1);
      await updateCart(line, newQty);
    }

    if (e.target.classList.contains('remove-item')) {
      const line = e.target.dataset.line;
      await updateCart(line, 0); // 0 means remove
    }
  });

  async function updateCart(line, quantity) {
    await fetch('/cart/change.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ line: parseInt(line), quantity: quantity })
    });

    refreshCartItems();
    updateCartIcon();
  }

  async function refreshCartItems() {
    const response = await fetch('/cart?view=drawer');
    const html = await response.text();
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    const newItems = doc.querySelector('#CartItems');
    if (newItems) cartContainer.innerHTML = newItems.innerHTML;
  }

  async function updateCartIcon() {
    const response = await fetch('/cart.js');
    const data = await response.json();
    const badge = document.querySelector('.cart-badge');
    if (badge) {
      badge.textContent = data.item_count > 0 ? data.item_count : '';
    }
  }
});


</script>
