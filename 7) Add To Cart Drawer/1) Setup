- When User Click on Add to Cart Button -> Open Cart Mini Drawer

Step 1) Place this near the end of your <body> tag in theme.liquid:

 <div id="cart-drawer" class="cart-drawer hidden fixed top-0 right-0 h-full w-full max-w-sm bg-white shadow-lg z-50 overflow-y-auto transition-transform transform translate-x-full">
  <div class="p-4 border-b flex justify-between items-center">
    <h2 class="text-lg font-bold">Your Cart</h2>
    <button id="close-cart" class="text-gray-500 hover:text-black">&times;</button>
  </div>
  <div id="cart-items" class="p-4">
    <!-- Cart items will load here -->
    {% render 'cart-drawer-items' %}
  </div>
</div>
<div id="cart-overlay" class="hidden fixed inset-0 bg-black bg-opacity-50 z-40"></div>



- Add Below Code to css file 

 .cart-drawer {
  transition: transform 0.3s ease;
}
.cart-drawer.open {
  transform: translateX(0%);
}


Step 2) Open Main JS File and add code

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('AddToCartForm');
    const minusBtn = document.querySelector('.quantity-btn.minus');
    const plusBtn = document.querySelector('.quantity-btn.plus');
    const qtyInput = document.getElementById('Quantity');
    const cartDrawer = document.getElementById('cart-drawer');
    const cartOverlay = document.getElementById('cart-overlay');
    const closeCartBtn = document.getElementById('close-cart');

    minusBtn.addEventListener('click', () => {
      let qty = parseInt(qtyInput.value);
      if (qty > 1) qtyInput.value = qty - 1;
    });

    plusBtn.addEventListener('click', () => {
      let qty = parseInt(qtyInput.value);
      qtyInput.value = qty + 1;
    });

    form.addEventListener('submit', function (e) {
      e.preventDefault();
      const formData = {
        id: document.getElementById('SelectedVariantId').value,
        quantity: qtyInput.value
      };

      fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
        body: JSON.stringify(formData)
      })
      .then(res => res.json())
      .then(() => {
        updateCartCount();
        openCartDrawer();
        loadCartDrawer();
      })
      .catch(console.error);
    });

    function updateCartCount() {
      fetch('/cart.js')
        .then(res => res.json())
        .then(cart => {
          const cartCountEl = document.querySelector('.cart-count');
          if (cartCountEl) cartCountEl.textContent = cart.item_count;
        });
    }

    function openCartDrawer() {
      cartDrawer.classList.add('open');
      cartOverlay.classList.remove('hidden');
    }

    function closeCartDrawer() {
      cartDrawer.classList.remove('open');
      cartOverlay.classList.add('hidden');
    }

    function loadCartDrawer() {
      fetch('/cart?view=drawer')
        .then(res => res.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const items = doc.querySelector('#CartItems');
          document.getElementById('cart-items').innerHTML = items ? items.innerHTML : '<p>Cart is empty.</p>';
        });
    }

    closeCartBtn.addEventListener('click', closeCartDrawer);
    cartOverlay.addEventListener('click', closeCartDrawer);
  });
</script>



Step 3) Create a snippets/cart-drawer-items.liquid

<div id="CartItems">
  {% for item in cart.items %}
    <div class="mb-4 border-b pb-2">
      <div>{{ item.product.title }}</div>
      <div>Qty: {{ item.quantity }}</div>
      <div>Price: {{ item.line_price | money }}</div>
    </div>
  {% endfor %}
</div>


Step 4) Create a cart.liquid template

{% if request.design_mode or request.path contains 'view=drawer' %}
  {% render 'cart-drawer-items' %}
{% else %}
  {% comment %} Default full cart page {% endcomment %}
  ...
{% endif %}
